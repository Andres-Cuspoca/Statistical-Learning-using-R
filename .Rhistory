install.packages(boot)
require(ISLR)
require(boot)
?cv.glm
car<-data("Auto")
car
car
data("Auto")
Auto
view(Auto)
data("Auto")->car
attach('Auto')
attach(Auto)
plot(mpg ,horsepower)
mod1<-glm(mpg ~ horsepower )
summary(mod1)
cv.glm(Auto,mod1)$delta
cv.glm(Auto,mod1)
summary(cv.glm(Auto,mod1))
cv
cv
?cv
cv()
?boot
loocv<-function(fit)
{
h = lm.influence(fit)$h
mean((residuals(fit))/(1-h)^2)
#hence it will compute the error , h=diagonal element of the hat matrix
#hat matrix is the operator matrix which produces the least square fit
}
loocv(mod1)
loocv<-function(fit)
{
h = lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
#hence it will compute the error , h=diagonal element of the hat matrix
#hat matrix is the operator matrix which produces the least square fit
}
loocv(mod1)
cv.error = rep(0,5)
cv.error
degree=1:5
for(d in degree)
{
model<-glm(mpg ~ poly(horsepower,d),data = Auto)
cv.error[d] = loocv(model)
}
plot(x = degree , y = cv.error,type='b' )
plot(x = degree , y = cv.error,type='b' ,title="Cross validation error for different degrees",xlab = "Degree",ylab = "Cross validation error")
require(ggplot2)
ggplot(aes(x = degree , u = cv.error)) +
geom_line()
ggplot(aes(x = degree , u = cv.error),data=Auto) +
geom_line()
ggplot(aes(x = degree , y = cv.error),data=Auto) +
geom_line()
plot(degree, cv.error10,type='b',col='red')
cv.error10 = rep(0,5)
for(d in degree)
{
model<-glm(mph~poly(horsepower,d),data = Auto)
cv.error10[d] = cv.glm(Auto, model, k=10)$delta[1]
}
cv.error10 = rep(0,5)
for(d in degree)
{
model<-glm(mpg~poly(horsepower,d),data = Auto)
cv.error10[d] = cv.glm(Auto, model, k=10)$delta[1]
}
plot(degree, cv.error10,type='b',col='red')
cv.error10 = rep(0,5)
for(d in degree)
{
mod<-glm(mpg~poly(horsepower,d),data = Auto)
cv.error10[d] = cv.glm(Auto, mod, k=10)$delta[1]
}
cv.error10 = rep(0,5)
for(d in degree)
{
mod<-glm(mpg~poly(horsepower,d),data = Auto)
cv.error10[d] = cv.glm(Auto, mod, K=10)$delta[1]
}
plot(degree, cv.error10,type='b',col='red')
lines(x = degree , y = cv.error,type='b' ,title="Cross validation error for different degrees",xlab = "Degree",ylab = "Cross validation error")
plot(degree, cv.error10,type='b',col='red')
plot(degree, cv.error10,type='b',col='red',xlab="Degree of polynomial",y="10 fold CV error")
plot(degree, cv.error10,type='b',col='red',xlab="Degree of polynomial",y="10 fold CV error")
plot(degree, cv.error10,type='b',col='red',xlab="Degree of polynomial",ylab ="10 fold CV error")
mod2<-glm(mpg ~ horsepower^2, data = Auto)
cv.glm(Auto,mod2,K=10)$delta
mod2<-glm(mpg ~ poly(horsepower,2), data = Auto)
cv.glm(Auto,mod2,K=10)$delta
mod2<-glm(mpg ~ poly(horsepower,4), data = Auto)
cv.glm(Auto,mod2,K=10)$delta
mod2<-glm(mpg ~ poly(horsepower,2), data = Auto)
cv.glm(Auto,mod2,K=5)$delta
cv.error5 = rep(0,5)
for(d in degree)
{
mod<-glm(mpg ~ poly(horsepower,d),data =Auto)
cv.error5[d] = cv.glm(Auto , mod , K=5)$delta[1]
}
lines(degree, cv.error5 , col = 'blue')
lines(degree, cv.error5 , col = 'blue',type= 'b')
legend(2000, 9.5, c('10-fold CV , 5-fold CV',lty=c(1,1),lwd=c(2.5,2.5),col=c("red","blue")))
lines(degree, cv.error5 , col = 'blue',type= 'b')
plot(degree, cv.error10,type='b',col='red',xlab="Degree of polynomial",ylab ="10 fold CV error")
lines(degree, cv.error5 , col = 'blue',type= 'b')
legend(2000, 9.5, c('10-fold CV , 5-fold CV',lty=c(1,1),lwd=c(2.5,2.5),col=c("red","blue")))
legend(2000, 9.5, c('10-fold CV , 5-fold CV',lty=c(1,1),lwd=c(2.5,2.5),col=c("red","blue")))
legend(2000, 9.5, c( "5-fold CV"),lty=c(1),lwd=c(2.5),col=c("blue")))
legend(2000, 9.5, c( "5-fold CV"),lty=c(1),lwd=c(2.5),col=c("blue"))
lines(degree, cv.error5 , col = 'blue',type= 'b')
lines(degree, cv.error5 , col = 'blue',type= 'b')
legend(2000, 9.5, c( "5-fold CV"),lty=c(1),lwd=c(2.5),col=c("blue"))
lines(degree, cv.error5 , col = 'blue',type= 'b'
)
lines(degree, cv.error5 , col = 'blue',type= 'b')
plot(degree, cv.error10,type='b',col='red',xlab="Degree of polynomial",ylab ="10 fold CV error vs 5 fold")
lines(degree, cv.error5 , col = 'blue',type= 'b')
legend(2000, 9.5, c( "5-fold CV"),lty=c(1),lwd=c(2.5),col=c("blue"))
load("C:/Users/hp/Downloads/5.R.RData")
View(Xy)
mod<-glm(y ~ X1 + X2)
mod<-glm(y ~ X1 + X2,data = Xy)
summary(mod)
matplot(Xy,type='l')
matplot(Xy,type='i')
matplot(Xy,type='L')
matplot(Xy,type='i')
source('F:/PROJECTS/StatsLearn/Bootstrapping.R', echo=TRUE)
matplot(Xy,type='l')
